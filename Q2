Basic libevent application code:
#include <iostream>
#include <cstring>  
#include <event2/event.h>
#include <event2/listener.h>
#include <event2/bufferevent.h>
#include <event2/buffer.h>  

using namespace std;

void acceptCallback(struct evconnlistener* listener, evutil_socket_t fd, struct sockaddr* addr, int socklen, void* arg) {
    // Create an event base
    struct event_base* base = static_cast<struct event_base*>(arg);

    // Create a bufferevent for the new connection
    struct bufferevent* bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);

    
    bufferevent_setcb(bev, [](struct bufferevent* bev, void* ctx) {
        struct evbuffer* input = bufferevent_get_input(bev);
        struct evbuffer* output = bufferevent_get_output(bev);

       
        evbuffer_add_buffer(output, input);
    }, nullptr, nullptr, nullptr);

   
    bufferevent_enable(bev, EV_READ | EV_WRITE);
}

int main() {
    
    struct event_base* base = event_base_new();
    if (!base) {
        cerr << "Error initializing libevent." << endl;
        return 1;
    }

    
    struct sockaddr_in sin;
    memset(&sin, 0, sizeof(sin)); // Initialize sin with zeros
    sin.sin_family = AF_INET;
    sin.sin_port = htons(9876);

    struct evconnlistener* listener = evconnlistener_new_bind(base, acceptCallback, base, LEV_OPT_REUSEABLE | LEV_OPT_CLOSE_ON_FREE, -1, (struct sockaddr*)&sin, sizeof(sin));
    if (!listener) {
        cerr << "Error creating listener." << endl;
        return 1;
    }

    // Start the event loop
    event_base_dispatch(base);

    // Clean up
    evconnlistener_free(listener);
    event_base_free(base);

    return 0;
}

